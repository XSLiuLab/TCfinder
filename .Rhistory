getwd()
usethis::use_agpl3_license("chenxuwu")
usethis::use_mit_license("chenxuwu")
usethis::use_roxygen_md()
usethis::use_testthat()
load("./data/GSE673_diff_path213.rds")
Diff_path <- readRDS("./data/Diff_path.rds")
pathway_score <- function(normalized_matrix){
Diff_path <- readRDS("data/Diff_path.rds")
KEGG_gene <- readRDS("data/KEGG_pathway_gene.rds")
score_gene <- KEGG_gene %>% filter(hsa %in% Diff_pathway$hsa)
gene_id <- rownames(normalized_matrix)
normalized_matrix <- as.data.frame(t(normalized_matrix))
colnames(normalized_matrix) <- gene_id
myFun1 <- function(number){
sum(number)/length(number)
}
all_pathway_score <- NA
for (i in 1:213) {
gene <- score_gene %>% filter(hsa == names(table(score_gene$hsa))[i])
data1 <- normalized_matrix %>% select(gene$gene_id[which(gene$gene_id %in% colnames(normalized_matrix)==TRUE)])
path_score <- as.data.frame(apply(data1, 1, myFun1))
colnames(path_score) <- names(table(score_gene$hsa))[i]
all_pathway_score <- cbind(all_pathway_score,path_score)
}
pathway_score <- all_pathway_score[,-1]
return(pathway_score)
}
file.edit("DESCRIPTION")
devtools::document()
devtools::document()
pwd
getwd()
?pathway_score
usethis::use_vignette("interpretation")
devtools::check()
devtools::check()
usethis::use_testthat()
usethis::use_test()
pwd
getwd()
library(testthat)
library(TCfinder)
evtools::test()
devtools::test()
load_all()
devtools::load_all()
devtools::check()
devtools::check()
devtools::test()
devtools::test()
devtools::load_all()
devtools::check()
pathway_score <- function(normalized_matrix){
Diff_path <- readRDS("data/Diff_path.rds")
KEGG_gene <- readRDS("data/KEGG_pathway_gene.rds")
score_gene <- KEGG_gene %>% filter(hsa %in% Diff_pathway$hsa)
gene_id <- rownames(normalized_matrix)
normalized_matrix <- as.data.frame(t(normalized_matrix))
colnames(normalized_matrix) <- gene_id
myFun1 <- function(number){
sum(number)/length(number)
}
all_pathway_score <- NA
for (i in 1:213) {
gene <- score_gene %>% filter(hsa == names(table(score_gene$hsa))[i])
data1 <- normalized_matrix %>% select(gene$gene_id[which(gene$gene_id %in% colnames(normalized_matrix)==TRUE)])
path_score <- as.data.frame(apply(data1, 1, myFun1))
colnames(path_score) <- names(table(score_gene$hsa))[i]
all_pathway_score <- cbind(all_pathway_score,path_score)
}
pathway_score <- all_pathway_score[,-1]
return(pathway_score)
}
data_normalized <- function(expr_data){
gene_id <- rownames(expr_data)
data1 <- expr_data %>% apply(2,function(x){x/sum(x) * 10000}) %>% as.data.frame()
data2 <- data1 %>% dplyr::mutate_all(funs(log2(.+1)))
rownames(data2) <- gene_id
data2 <- round(data2,3)
return(data2)
}
devtools::check()
devtools::check()
View(pathway_score)
("data/Diff_path.rds")
("data/Diff_path.rds")
Diff_path <- readRDS("data/Diff_path.rds")
KEGG_gene <- readRDS("data/KEGG_pathway_gene.rds")
pathway_score <- function(normalized_matrix){
Diff_path <- readRDS("data/Diff_path.rds")
KEGG_gene <- readRDS("data/KEGG_pathway_gene.rds")
score_gene <- KEGG_gene %>% filter(hsa %in% Diff_pathway$hsa)
gene_id <- rownames(normalized_matrix)
normalized_matrix <- as.data.frame(t(normalized_matrix))
colnames(normalized_matrix) <- gene_id
myFun1 <- function(number){
sum(number)/length(number)
}
all_pathway_score <- NA
for (i in 1:213) {
gene <- score_gene %>% filter(hsa == names(table(score_gene$hsa))[i])
data1 <- normalized_matrix %>% select(gene$gene_id[which(gene$gene_id %in% colnames(normalized_matrix)==TRUE)])
path_score <- as.data.frame(apply(data1, 1, myFun1))
colnames(path_score) <- names(table(score_gene$hsa))[i]
all_pathway_score <- cbind(all_pathway_score,path_score)
}
pathway_score <- all_pathway_score[,-1]
return(pathway_score)
}
usethis::use_test()
usethis::use_test()
devtools::check()
library(TCfinder)
devtools::check()
devtools::check()
devtools::check()
Diff_path <- read.csv("data/TCfinder_Pathway.csv")
View(Diff_path)
KEGG_gene <- read.csv("data/KEGG_Gene.csv")
View(KEGG_gene)
save(Diff_path,"./data/Diff_path.Rdata")
save(Diff_path,"./data/")
save(Diff_path,"./data/Diff_path.Rda")
save(Diff_path,"./data/Diff_path.rda")
load(file = "./data/KEGG_Gene.rda")
load(file = "./data/KEGG_Gene.rda")
load(file = "./data/TCfinder_Pathway.rda")
load(file = "./data/TCfinder_Pathway.rda")
load(file = "./data/TCfinder_Pathway.rda")
View(TCfinder_Pathway)
remove(list = ls())
load(file = "./data/KEGG_Gene.rda")
load(file = "./data/TCfinder_Pathway.rda")
score_gene <- KEGG_gene %>% filter(hsa %in% TCfinder_pathway$hsa)
library(dplyr)
score_gene <- KEGG_gene %>% filter(hsa %in% TCfinder_pathway$hsa)
score_gene <- KEGG_Gene %>% filter(hsa %in% TCfinder_pathway$hsa)
View(TCfinder_Pathway)
View(TCfinder_Pathway)
score_gene <- KEGG_Gene %>% filter(hsa %in% TCfinder_Pathway$hsa)
utils::data()
utils::data()
devtools::check()
usethis::use_data()
usethis::use_data(KEGG_Gene.rda)
usethis::use_data(TCfinder_Pathway.rda)
KEGG_Gene <- KEGG_Gene
TCfinder_Pathway <- TCfinder_Pathway
usethis::use_data(TCfinder_Pathway)
usethis::use_data(KEGG_Gene)
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
remove(list = ls())
KEGG_Gene <- TCfinder::KEGG_Gene.rds
KEGG_Gene <- TCfinder::KEGG_Gene
TCfinder_Pathway <- TCfinder::TCfinder_Pathway
devtools::document()
devtools::check()
library(TCfinder)
devtools::load_all(".")
devtools::document()
data_test <- fread("inst/extdata/tests_score.csv")
library(data.table)
data_test <- fread("inst/extdata/tests_score.csv")
library(reticulate)
predict_cell <- function(path_score){
reticulate::source_python('inst/extdata/predict_py.py')
predict <- predict_py(path_score)
predict_result <- as.data.frame(predict)
result <- predict_result %>% mutate(cell_type = case_when(V1 > 0.5 ~ "normal",
V1 <= 0.5 ~ "tumor"))
colnames(result) <- c("value","cell_type")
return(result)
}
data_test <- fread("inst/extdata/tests_score.csv")
result <- predict_cell(path_score = data_test)
reticulate::py_config()
python
reticulate::repl_python()
reticulate::py_config()
result <- predict_cell(path_score = data_test)
library(reticulate)
reticulate::py_config()
use_python("D:/Users/wuchx/anaconda3/envs/tensorflow/python.exe")
library(reticulate)
reticulate::py_config()
use_python("D:/Users/wuchx/anaconda3/envs/tensorflow/python.exe")
library(reticulate)
use_python("D:/Users/wuchx/anaconda3/envs/tensorflow/python.exe")
reticulate::py_config()
predict_cell <- function(path_score){
reticulate::source_python('inst/extdata/predict_py.py')
predict <- predict_py(path_score)
predict_result <- as.data.frame(predict)
result <- predict_result %>% mutate(cell_type = case_when(V1 > 0.5 ~ "normal",
V1 <= 0.5 ~ "tumor"))
colnames(result) <- c("value","cell_type")
return(result)
}
data_test <- fread("inst/extdata/tests_score.csv")
library(data.table)
data_test <- fread("inst/extdata/tests_score.csv")
predict_cell <- function(path_score){
reticulate::source_python('inst/extdata/predict_py.py')
predict <- predict_py(path_score)
predict_result <- as.data.frame(predict)
result <- predict_result %>% mutate(cell_type = case_when(V1 > 0.5 ~ "normal",
V1 <= 0.5 ~ "tumor"))
colnames(result) <- c("value","cell_type")
return(result)
}
result <- predict_cell(path_score = data_test)
predict_cell <- function(path_score){
reticulate::source_python('inst/extdata/predict_py.py')
predict <- predict_py(path_score)
predict_result <- as.data.frame(predict)
result <- predict_result %>% mutate(cell_type = case_when(V1 > 0.5 ~ "normal",
V1 <= 0.5 ~ "tumor"))
colnames(result) <- c("value","cell_type")
return(result)
}
result <- predict_cell(path_score = data_test)
result <- predict_cell(path_score = data_test)
library(data.table)
data_test <- fread("inst/extdata/tests_score.csv")
library(reticulate)
use_python("D:/Users/wuchx/anaconda3/envs/tensorflow/python.exe")
reticulate::py_config()
predict_cell <- function(path_score){
reticulate::source_python('inst/extdata/predict_py.py')
predict <- predict_py(path_score)
predict_result <- as.data.frame(predict)
result <- predict_result %>% mutate(cell_type = case_when(V1 > 0.5 ~ "normal",
V1 <= 0.5 ~ "tumor"))
colnames(result) <- c("value","cell_type")
return(result)
}
result <- predict_cell(path_score = data_test)
result <- predict_cell(path_score = data_test)
predict_cell <- function(path_score){
reticulate::source_python('inst/extdata/predict_py.py')
predict <- predict_py(path_score)
predict_result <- as.data.frame(predict)
result <- predict_result %>% mutate(cell_type = case_when(V1 > 0.5 ~ "normal",
V1 <= 0.5 ~ "tumor"))
colnames(result) <- c("value","cell_type")
return(result)
}
result <- predict_cell(path_score = data_test)
reticulate::source_python('inst/extdata/predict_py.py')
predict <- predict_py(data_test)
reticulate::repl_python()
from tensorflow.keras.models import load_model
model = load_model("./inst/extdata/TCfinder.hdf5")
data2 = r.data.test
data2 = r.data_test
predict = model.predict(data2)
data_test <- fread("inst/extdata/tests_score.csv")
quit
data2[1:5,1:5]
data_test[1:5,1:5]
class(data_test)
data_test <- fread("inst/extdata/tests_score.csv",data.table = F)
class(data_test)
reticulate::repl_python()
data2 = r.data_test
data2
library(data.table)
data_test <- fread("inst/extdata/tests_score.csv",data.table = F)
library(reticulate)
use_python("D:/Users/wuchx/anaconda3/envs/tensorflow/python.exe")
reticulate::py_config()
reticulate::repl_python()
import pandas as pd
import numpy as np
import pandas as pd
data2 = r.data_test
quit
predict_cell <- function(path_score){
reticulate::source_python('inst/extdata/predict_py.py')
predict <- predict_py(path_score)
predict_result <- as.data.frame(predict)
result <- predict_result %>% mutate(cell_type = case_when(V1 > 0.5 ~ "normal",
V1 <= 0.5 ~ "tumor"))
colnames(result) <- c("value","cell_type")
return(result)
}
result <- predict_cell(path_score = data_test)
library(dplyr)
result <- predict_cell(path_score = data_test)
View(result)
table(result$cell_type)
devtools::load_all()
sethis::use_testthat(3)
usethis::use_testthat(3)
usethis::use_test()
use_test("predict_cell")
usethis::use_test("predict_cell")
devtools::document()
devtools::check()
library(fs)
fs::path_package("extdata",package = "TCfinder")
fs::path_package("predict_py.py",package = "TCfinder")
fs::path_package("predict_py.py",package = "TCfinder")
fs::path_package("extdata",package = "TCfinder")
Path <- fs::path_package("extdata",package = "TCfinder")
paste0(Path,"predict_py.py")
reticulate::repl_python()
Path = r.Path
Path+"/TCfinder.hdf5"
quit
predict_cell <- function(path_score){
Path <- fs::path_package("extdata",package = "TCfinder")
reticulate::source_python(paste0(Path,"predict_py.py"))
predict <- predict_py(path_score,Path)
predict_result <- as.data.frame(predict)
result <- predict_result %>% mutate(cell_type = case_when(V1 > 0.5 ~ "normal",
V1 <= 0.5 ~ "tumor"))
colnames(result) <- c("value","cell_type")
return(result)
}
result1 <- predict_cell(data_test)
Path <- fs::path_package("extdata",package = "TCfinder")
Path
paste0(Path,"predict_py.py")
predict_cell <- function(path_score){
Path <- fs::path_package("extdata",package = "TCfinder")
reticulate::source_python(paste0(Path,"/predict_py.py"))
predict <- predict_py(path_score,Path)
predict_result <- as.data.frame(predict)
result <- predict_result %>% mutate(cell_type = case_when(V1 > 0.5 ~ "normal",
V1 <= 0.5 ~ "tumor"))
colnames(result) <- c("value","cell_type")
return(result)
}
data_test <- fread("inst/extdata/tests_score.csv",data.table = F)
result1 <- predict_cell(data_test)
devtools::check()
devtools::check()
devtools::document()
rm(list = c("predict_cell"))
devtools::load_all()
devtools::document()
roxygen2::roxygenise()
devtools::document()
devtools::check()
library(data.table)
a <- fread("./inst/extdata/GOSH_pathway_score.csv")
a[1:5,1:5]
pathway_score <- function(normalized_matrix){
KEGG_Gene <- TCfinder::KEGG_Gene
TCfinder_Pathway <- TCfinder::TCfinder_Pathway
score_gene <- KEGG_Gene %>% filter(hsa %in% TCfinder_Pathway$hsa)
gene_id <- rownames(normalized_matrix)
barcode <- colnames(normalized_matrix)
normalized_matrix <- as.data.frame(t(normalized_matrix))
colnames(normalized_matrix) <- gene_id
myFun1 <- function(number){
sum(number)/length(number)
}
all_pathway_score <- NA
for (i in 1:213) {
gene <- score_gene %>% filter(hsa == names(table(score_gene$hsa))[i])
data1 <- normalized_matrix %>% select(gene$gene_id[which(gene$gene_id %in% colnames(normalized_matrix)==TRUE)])
path_score <- as.data.frame(apply(data1, 1, myFun1))
colnames(path_score) <- names(table(score_gene$hsa))[i]
all_pathway_score <- cbind(all_pathway_score,path_score)
}
pathway_score <- all_pathway_score[,-1]
pathway_score <- pathway_score %>% dplyr::select(TCfinder_Pathway$hsa)
rownames(pathway_score) <- barcode
return(pathway_score)
}
predict_cell <- function(path_score){
barcode <- rownames(path_score)
Path <- fs::path_package("extdata",package = "TCfinder")
reticulate::source_python(paste0(Path,"/predict_py.py"))
predict <- predict_py(path_score,Path)
predict_result <- as.data.frame(predict)
result <- predict_result %>% mutate(cell_type = case_when(V1 > 0.5 ~ "normal",
V1 <= 0.5 ~ "tumor"))
colnames(result) <- c("value","cell_type")
result$barcode <- barcode
return(result)
}
library(TCfinder)
library(TCfinder)
